generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Podcast {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrl    String
  language    String
  website     String?
  author      String
  Category    String[]
  country     String?
  copyright   String
  userId      String   @db.Uuid

  explicit   Boolean             @default(false)
  episodes   Episode[]           @relation("PodcastEpisodes")
  members    PodcastMembership[] @relation("PodcastMemberships")
  invitation Invitation[]        @relation("PodcastInvitations")
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

model PodcastMembership {
  podcastId String

  podcast Podcast @relation("PodcastMemberships", fields: [podcastId], references: [id], onDelete: Cascade)
  userId  String  @db.Uuid

  roleId    Int
  role      Role     @relation("PodcastMembershipRoles", fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([podcastId, userId])
}

enum EpisodeStatus {
  Draft
  Scheduled
  Published
}

model Episode {
  id          Int           @id @default(autoincrement())
  episodeNo   String
  title       String
  description String
  audioUrl    String
  seasonNo    Int
  status      EpisodeStatus @default(Draft)
  pubDate     DateTime?
  Enclosure   Enclosure?    @relation("EpisodeEnclosures")
  podcastId   String
  podcast     Podcast       @relation("PodcastEpisodes", fields: [podcastId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Enclosure {
  id        Int     @id @default(autoincrement())
  url       String
  length    Int
  type      String
  episodeId Int
  episode   Episode @relation("EpisodeEnclosures", fields: [episodeId], references: [id])

  @@unique([episodeId])
}

model Invitation {
  id       Int     @id @default(autoincrement())
  email    String
  roleId   Int
  accepted Boolean @default(false)
  userId   String  @db.Uuid

  podcastId String
  podcast   Podcast @relation("PodcastInvitations", fields: [podcastId], references: [id], onDelete: Cascade)
  role      Role    @relation("InvitationRoles", fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  invitations       Invitation[]        @relation("InvitationRoles")
  podcastMembership PodcastMembership[] @relation("PodcastMembershipRoles")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}
